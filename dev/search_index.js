var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = TwoStageSpanningTree","category":"page"},{"location":"#TwoStageSpanningTree","page":"Home","title":"TwoStageSpanningTree","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for TwoStageSpanningTree.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [TwoStageSpanningTree]","category":"page"},{"location":"#TwoStageSpanningTree.TwoStageSpanningTreeInstance","page":"Home","title":"TwoStageSpanningTree.TwoStageSpanningTreeInstance","text":"struct TwoStageSpanningTreeInstance{T}\n\nFields\n\ngraph::Graphs.SimpleGraphs.SimpleGraph{Int64}: Graph\nfirst_stage_costs::Vector: First stage costs for each edge\nsecond_stage_costs::Matrix: Second stage costs for each edge and scenario [e, s]\n\n\n\n\n\n","category":"type"},{"location":"#TwoStageSpanningTree.kruskal-Tuple{Graphs.AbstractGraph, AbstractVector}","page":"Home","title":"TwoStageSpanningTree.kruskal","text":"kruskal(\n    g::Graphs.AbstractGraph,\n    weights::AbstractVector;\n    minimize\n) -> NamedTuple{(:value, :tree), _A} where _A<:Tuple{Any, Any}\n\n\nKruskal's algorithm. Same as Graphs.kruskal_mst, but also returns the value of the tree, and a binary vector instead of a vecror of edges.\n\n\n\n\n\n","category":"method"},{"location":"#TwoStageSpanningTree.nb_scenarios-Tuple{TwoStageSpanningTreeInstance}","page":"Home","title":"TwoStageSpanningTree.nb_scenarios","text":"nb_scenarios(\n    instance::TwoStageSpanningTreeInstance\n) -> Int64\n\n\nReturn the number of scenarios of instance.\n\n\n\n\n\n","category":"method"}]
}
